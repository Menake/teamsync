// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    relationMode         = "prisma"
}

model User {
    id           String  @id @default(cuid())
    email        String  @unique
    name         String
    activeTeamId String?
    password     String

    roles              Role[]
    rosters            RosterMember[]
    teams              Team[]
    notificationTokens NotificationToken[]
}

model NotificationToken {
    token  String
    user   User   @relation(fields: [userId], references: [id], onUpdate: NoAction)
    userId String

    @@unique([token, userId])
    @@index([userId])
}

model Role {
    id    String @id @default(cuid())
    title String
    users User[]
}

model Tournament {
    id        String                @id @default(cuid())
    name      String
    fixtures  Fixture[]
    teamStats TeamTournamentStats[]
}

model Team {
    id              String                @id @default(cuid())
    name            String
    members         User[]
    fixtures        Fixture[]
    fixtureScores   FixtureTeamScore[]
    fixtureDetails  FixtureTeamDetail[]
    tournamentStats TeamTournamentStats[]
}

model TeamTournamentStats {
    wins   Int
    losses Int
    draws  Int
    points Decimal @default(0)

    team   Team   @relation(fields: [teamId], references: [id])
    teamId String

    tournament   Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String

    @@id([teamId, tournamentId])
    @@index([teamId])
    @@index([tournamentId])
}

model Location {
    id        String    @id @default(cuid())
    name      String
    address   String    @unique
    longitude Decimal
    latitude  Decimal
    Fixture   Fixture[]
}

model Fixture {
    id       String   @id @default(cuid())
    date     DateTime
    location Location @relation(fields: [locationId], references: [id])

    participatingTeams Team[]
    details            FixtureTeamDetail[]
    scores             FixtureTeamScore[]

    tournament   Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId String
    locationId   String

    @@index([locationId])
    @@index([tournamentId])
}

enum Availability {
    AVAILABLE
    UNAVAILABLE
    UNKNOWN
}

model RosterMember {
    id           String       @id @default(cuid())
    availability Availability @default(UNKNOWN)
    tasks        RosterTask[]

    fixtureDetail   FixtureTeamDetail @relation(fields: [fixtureDetailId], references: [id], onUpdate: NoAction)
    fixtureDetailId String

    player   User   @relation(fields: [playerId], references: [id], onUpdate: NoAction)
    playerId String

    @@index([fixtureDetailId])
    @@index([playerId])
}

model RosterTask {
    id   String @id @default(cuid())
    type String

    rosterMember   RosterMember @relation(fields: [rosterMemberId], references: [id], onDelete: Cascade, onUpdate: NoAction)
    rosterMemberId String

    @@index([rosterMemberId])
}

model FixtureTeamDetail {
    id     String         @id @default(cuid())
    roster RosterMember[]

    fixture   Fixture @relation(fields: [fixtureId], references: [id])
    fixtureId String

    team   Team   @relation(fields: [teamId], references: [id], onUpdate: NoAction)
    teamId String

    @@index([fixtureId])
    @@index([teamId])
}

model FixtureTeamScore {
    id    String @id @default(cuid())
    score Int

    fixture   Fixture @relation(fields: [fixtureId], references: [id])
    fixtureId String

    team   Team   @relation(fields: [teamId], references: [id], onUpdate: NoAction)
    teamId String

    @@index([fixtureId])
    @@index([teamId])
}
